p = 52435875175126190479447740508185965837690552500527637822603658699938581184513
Fp = GF(p)
A = Fp(0x4247698f4e32ad45a293959b4ca17afa4a2d2317e4c6ce5023e1fd63d1b5de98)
B = Fp(0x300c3385d13bedb7c9e229e185c4ce8b1dd3b71366bb97c30855c0aa41d62727)
r = 13108968793781547619861935127046491459309155893440570251786403306729687672801 
h = 4

# Conversion to Weierstrass
a = B**2 * (1-A**2/3)
b = B**3 * A * (2*A**2/9 - 1) / 3 
E = EllipticCurve(Fp, [a,b])
assert(E.j_invariant() == 8000)
assert(E.order()%r == 0)

P=2*E(7509346423862612418190173946594710057211510533440150473567152422923355618270, 49293898635337009066582325121244176517955105508636509767260015946455810969467)
Q=E(10285101765492490504774660138011396607705103024437041680918152361638747579163, 40377448385375597524958924283427428813006225297436855641965372932664379034302)
k = 11997154529596648729624281997554038960651754640906483911385998427296165917073
k1 = -45894336995428141233269187797940484884
k2 = 8683555061824981937504960049179714114

def φ_minus_one(P):
    # see `φ.sage`
    X,Y = to_mg(P)
    α = Fp(13017314467421381532402061398313046228820690393386411611562176812113295071440)
    β = Fp(14989411347484419666605643019079533103863186413725217032868654387860539633484)
    γ = Fp(39953720565912266872856944794434720047230584117801669040511822283402326025498)
    return α*X*(X+β)**2/(X+γ)**2

def φ(P):
    # see rmX and smX in `φ.sage`
    X,Y = to_mg(P)
    a1 = 26217937587563095239723870254092982918845276250263818911301829349969290592256
    a2 = 14989411347484419663140498193005880785086916883037474254598401919095177670475
    a3 = 14989411347484419663140498193005880785086916883037474254598401919095177670477
    return a1 * (X+a2) * (X+a3)/X

def to_mg(P):
    u = P[0]/P[2]
    v = P[1]/P[2]
    x = u/B - A/3
    y = v/B**2
    return x,y

# # # GLV decomposition
λ=8913659658109529928382530854484400854125314752504019737736543920008458395397
# M = Matrix([[-λ,1], [r,0]]).LLL()
# assert((M[0][0] + λ * M[0][1])%r == 0)
# N = M**-1
# [α,β] = vector([k, 0]) * N
# v = vector([round(α), round(β)]) * M
# asert [k1,k2] == vector([k,0]) - v


# GENERATION OF TEST VECTORS

def test_vector_point(P,name,ws=True):
    if ws:
        [x,y] = to_mg(P)
    else:
        x = P
    print("\t\t{} = E(F({}), 1)".format(name, hex(x), 1))

def test_vector_scalar(k,name):
    print("\t\t{} = {}".format(name, hex(k)))

test_vector_point(P, 'P')
test_vector_point(Q, 'Q')
test_vector_point(2*P, 'Pdbl')
test_vector_point(P+Q, 'PpQ')
test_vector_point(P-Q, 'PmQ')
test_vector_point(φ(P), 'φP', False)
test_vector_point(φ_minus_one(P), 'φ_minus_one_P', False)
test_vector_point(k*P, 'kP')
test_vector_point(k1*P, 'k1P')
test_vector_point(k2*P, 'k2P')
test_vector_point(k1*P + k2*Q, 'k1Ppk2Q')
test_vector_scalar(k,'k')
test_vector_scalar(k1,'k1')
test_vector_scalar(k2,'k2')
test_vector_scalar(λ,'λ')

