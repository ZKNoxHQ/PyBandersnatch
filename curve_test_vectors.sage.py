

# This file was *autogenerated* from the file curve_test_vectors.sage
from sage.all_cmdline import *   # import sage library

_sage_const_52435875175126190479447740508185965837690552500527637822603658699938581184513 = Integer(52435875175126190479447740508185965837690552500527637822603658699938581184513); _sage_const_0x4247698f4e32ad45a293959b4ca17afa4a2d2317e4c6ce5023e1fd63d1b5de98 = Integer(0x4247698f4e32ad45a293959b4ca17afa4a2d2317e4c6ce5023e1fd63d1b5de98); _sage_const_5 = Integer(5); _sage_const_13108968793781547619861935127046491459309155893440570251786403306729687672801 = Integer(13108968793781547619861935127046491459309155893440570251786403306729687672801); _sage_const_4 = Integer(4); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_3 = Integer(3); _sage_const_9 = Integer(9); _sage_const_8000 = Integer(8000); _sage_const_0 = Integer(0); _sage_const_31511963179209183026886029814959507395230513391536014203721350106469568871776 = Integer(31511963179209183026886029814959507395230513391536014203721350106469568871776); _sage_const_45347120062487836513813256222005391829075297965413648488198604153937949600247 = Integer(45347120062487836513813256222005391829075297965413648488198604153937949600247); _sage_const_20252373884274151187306374916054971403178400027240398097441693977206289492028 = Integer(20252373884274151187306374916054971403178400027240398097441693977206289492028); _sage_const_51776867226593987565156122032412653740536539297269422625045303422905294395870 = Integer(51776867226593987565156122032412653740536539297269422625045303422905294395870); _sage_const_11997154529596648729624281997554038960651754640906483911385998427296165917073 = Integer(11997154529596648729624281997554038960651754640906483911385998427296165917073); _sage_const_45894336995428141233269187797940484884 = Integer(45894336995428141233269187797940484884); _sage_const_8683555061824981937504960049179714114 = Integer(8683555061824981937504960049179714114); _sage_const_8913659658109529928382530854484400854125314752504019737736543920008458395397 = Integer(8913659658109529928382530854484400854125314752504019737736543920008458395397); _sage_const_13017314467421381532402061398313046228820690393386411611562176812113295071440 = Integer(13017314467421381532402061398313046228820690393386411611562176812113295071440); _sage_const_14989411347484419666605643019079533103863186413725217032868654387860539633484 = Integer(14989411347484419666605643019079533103863186413725217032868654387860539633484); _sage_const_39953720565912266872856944794434720047230584117801669040511822283402326025498 = Integer(39953720565912266872856944794434720047230584117801669040511822283402326025498); _sage_const_26217937587563095239723870254092982918845276250263818911301829349969290592256 = Integer(26217937587563095239723870254092982918845276250263818911301829349969290592256); _sage_const_14989411347484419663140498193005880785086916883037474254598401919095177670475 = Integer(14989411347484419663140498193005880785086916883037474254598401919095177670475); _sage_const_14989411347484419663140498193005880785086916883037474254598401919095177670477 = Integer(14989411347484419663140498193005880785086916883037474254598401919095177670477)# Bandersnatch, Montgomery model
Fp = GF(_sage_const_52435875175126190479447740508185965837690552500527637822603658699938581184513 )
A = Fp(_sage_const_0x4247698f4e32ad45a293959b4ca17afa4a2d2317e4c6ce5023e1fd63d1b5de98 )
B = Fp(_sage_const_5 )
r = _sage_const_13108968793781547619861935127046491459309155893440570251786403306729687672801 
h = _sage_const_4 

# Bandersnatch, Weierstrass model
a = B**_sage_const_2  * (_sage_const_1 -A**_sage_const_2 /_sage_const_3 )
b = B**_sage_const_3  * A * (_sage_const_2 *A**_sage_const_2 /_sage_const_9  - _sage_const_1 ) / _sage_const_3 
E = EllipticCurve(Fp, [a, b])
assert (E.j_invariant() == _sage_const_8000 )
assert (E.order() % r == _sage_const_0 )


def to_mg(P):
    u = P[_sage_const_0 ]/P[_sage_const_2 ]
    v = P[_sage_const_1 ]/P[_sage_const_2 ]
    x = u/B - A/_sage_const_3 
    y = v/B**_sage_const_2 
    return x, y


p = E(_sage_const_31511963179209183026886029814959507395230513391536014203721350106469568871776 ,
      _sage_const_45347120062487836513813256222005391829075297965413648488198604153937949600247 )
q = E(_sage_const_20252373884274151187306374916054971403178400027240398097441693977206289492028 ,
      _sage_const_51776867226593987565156122032412653740536539297269422625045303422905294395870 )
k = _sage_const_11997154529596648729624281997554038960651754640906483911385998427296165917073 
k1 = -_sage_const_45894336995428141233269187797940484884 
k2 = _sage_const_8683555061824981937504960049179714114 
λ = _sage_const_8913659658109529928382530854484400854125314752504019737736543920008458395397 


def φ_minus_one(p):
    # see `φ.sage`
    X, Y = to_mg(p)
    α = Fp(_sage_const_13017314467421381532402061398313046228820690393386411611562176812113295071440 )
    β = Fp(_sage_const_14989411347484419666605643019079533103863186413725217032868654387860539633484 )
    γ = Fp(_sage_const_39953720565912266872856944794434720047230584117801669040511822283402326025498 )
    return α*X*(X+β)**_sage_const_2 /(X+γ)**_sage_const_2 


def φ(p):
    # see rmX and smX in `φ.sage`
    X, Y = to_mg(p)
    a1 = _sage_const_26217937587563095239723870254092982918845276250263818911301829349969290592256 
    a2 = _sage_const_14989411347484419663140498193005880785086916883037474254598401919095177670475 
    a3 = _sage_const_14989411347484419663140498193005880785086916883037474254598401919095177670477 
    return a1 * (X+a2) * (X+a3)/X

# GENERATION OF TEST VECTORS


def test_vector_point(p, name, ws=True):
    if ws:
        [x, y] = to_mg(p)
    else:
        x = p
    print("test_vectors['{}'] = E(F({}), 1)".format(name, hex(x), _sage_const_1 ))


def test_vector_scalar(k, name):
    print("test_vectors['{}'] = {}".format(name, hex(k)))


print("F = Field(0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001)")
print("a = F(0x4247698f4e32ad45a293959b4ca17afa4a2d2317e4c6ce5023e1fd63d1b5de98)")
print("b = F(5)")
print("r = 0x1cfb69d4ca675f520cce760202687600ff8f87007419047174fd06b52876e7e1")
print("h = 4")
print("E = Curve(a, b, r, h)")
print("test_vectors = {}")
test_vector_point(p, 'p')
test_vector_point(q, 'q')
test_vector_point(_sage_const_2 *p, 'p_double')
test_vector_point(p+q, 'p_plus_q')
test_vector_point(p-q, 'p_minus_q')
test_vector_point(φ(p), 'φ_p', False)
test_vector_point(φ_minus_one(p), 'φ_minus_one_p', False)
test_vector_point(k*p, 'k_times_p')
test_vector_point(k1*p, 'k1_times_p')
test_vector_point(k2*p, 'k2_times_p')
test_vector_point(k1*p + k2*q, 'k1_times_p_plus_k2_times_q')
test_vector_scalar(k, 'k')
test_vector_scalar(k1, 'k1')
test_vector_scalar(k2, 'k2')
test_vector_scalar(λ, 'λ')

